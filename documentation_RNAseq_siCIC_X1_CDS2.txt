This code describes how we processed the raw RNA-seq data generated by Novogene to look at differentially expressed genes in two CIC-DUX4 patient derived cell lines, where each cell line was treated with a control siRNA or siCIC.
It is not meant to be plug-and-play, just a guide. We have omitted the information passed to the UCSF Wynton job scheduler in these scripts.

Each section contains a header describing the block, followed by the code itself, in this format:

----------------------
Header 
---
Code block
---
----------------------

Tools used:
STAR (2.7.10b)
multiqc (1.13)
samtools (1.17)
fastqc (0.11.9)
deeptools (3.5.1)



Contact cuyler.luck@ucsf.edu or ross.okimoto@ucsf.edu with questions.



----------------------
We first need to download a reference genome in FASTA format and genome annotation file in GTF format from ENSEMBL. Here we downloaded GRCh38.p13, or release 108, from the ENSEMBL FTP server. We previously downloaded these, but if you need to download these you can use wget and expand the compressed files using gzip.
---
wget https://ftp.ensembl.org/pub/release-108/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz

wget https://ftp.ensembl.org/pub/release-108/gtf/homo_sapiens/Homo_sapiens.GRCh38.108.gtf.gz

gzip -d Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz

gzip -d Homo_sapiens.GRCh38.108.gtf.gz
---
----------------------


----------------------
We next need to create an index for STAR to use based on the reference genome FASTA and GTF files. We chose to use --sjdbOverhang 149 because we had reads of length 150bp, and the recommendation from the STAR manual is to use max(ReadLength)-1. 
The NSLOTS variable helps our job scheduler know how many cores to use, you don't necessarily need to do it like this.
This step requires a lot of RAM but was easily doable on Wynton. Probably cannot be done on a normal laptop.
---
STAR --runThreadN "${NSLOTS:-1}" --runMode genomeGenerate --genomeDir ./star_index --genomeFastaFiles ./Raw/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa --sjdbGTFfile ./Raw/Homo_sapiens.GRCh38.108.gtf --sjdbOverhang 149
---
----------------------


----------------------
Next, we can perform STAR alignment of all samples, one at a time. After generating an alignment as a .sam file, we converted to a .bam file using samtools and then deleted the .sam file due to disk space limitations.
We used --quantMode GeneCounts to extract gene counts at the same time as alignment was performed.
I also generated a FASTQC report for the fastq files at the same time, for quality control.
Also having samtools index the .bam files, since we will want to look at them in IGV later.
---
for sample in X1_siSCRMBL1 X1_siSCRMBL2 X1_siCIC1 X1_siCIC2 X292_SCRMBL1 X292_SCRMBL2 X292_siCIC1 X292_siCIC2 
do
	STAR --runThreadN "${NSLOTS:-1}" --genomeDir ./star_index --readFilesIn ./Raw/${sample}_1.fq.gz ./Raw/${sample}_2.fq.gz --readFilesCommand zcat --outFileNamePrefix ./alignments/star/$sample --quantMode GeneCounts
	samtools sort -@ "${NSLOTS:-1}" -o ./alignments/star/$sample.bam ./alignments/star/*.sam
	rm ./alignments/star/*.sam
	samtools index -b -@ "${NSLOTS:-1}" ./alignments/star/$sample.bam
	fastqc ./Raw/${sample}_1.fq.gz ./Raw/${sample}_2.fq.gz
done
---
----------------------

----------------------
Combining FASTQC reports with MultiQC, just for ease of viewing.
(Run in directory that contains all *_fastqc.zip reports, swap out "." for a path to those reports)
---
multiqc .
---
----------------------

----------------------
Since STAR isn't built to look at fusion transcripts in the manner that we ran it, I'm going to manually search the FASTQ files for reads that contain a 20-base sequence that spans the breakpoints for each cell line (they are published). 
For X1, using this sequence: CTCTGGGGGTGGAGGCGACG
For CDS2/X292 (same thing), using this sequence: CGGACTCTGGGGAGCCGGCG
---
for sample in X1_siSCRMBL1 X1_siSCRMBL2 X1_siCIC1 X1_siCIC2
do
	zcat ${sample}_1.fq.gz > ${sample}_1_unzipped.fastq
	grep -i "CTCTGGGGGTGGAGGCGACG" ${sample}_1_unzipped.fastq > grep/${sample}_1_fusion_reads.txt
	rm ${sample}_1_unzipped.fastq
	zcat ${sample}_2.fq.gz > ${sample}_2_unzipped.fastq
	grep -i "CTCTGGGGGTGGAGGCGACG" ${sample}_2_unzipped.fastq > grep/${sample}_2_fusion_reads.txt
	rm ${sample}_2_unzipped.fastq
done

for sample in X292_SCRMBL1 X292_SCRMBL2 X292_siCIC1 X292_siCIC2
do
	zcat ${sample}_1.fq.gz > ${sample}_1_unzipped.fastq
	grep -i "CGGACTCTGGGGAGCCGGCG" ${sample}_1_unzipped.fastq > grep/${sample}_1_fusion_reads.txt
	rm ${sample}_1_unzipped.fastq
	zcat ${sample}_2.fq.gz > ${sample}_2_unzipped.fastq
	grep -i "CGGACTCTGGGGAGCCGGCG" ${sample}_2_unzipped.fastq > grep/${sample}_2_fusion_reads.txt
	rm ${sample}_2_unzipped.fastq
done
---
----------------------

----------------------
Similar to the above, we are interested in how many reads contain the wild type CIC sequence as opposed to the fusion. To get an idea of this, I will look for reads that contain a 20 base sequence corresponding to the wild type transcript at the same spot where the fusion breakpoint is. The location of the CIC breakpoint is the same in both cell lines, so we can use the same sequence for both.
For both, using this sequence: CGGACTCTGGCACGGCCCAG. It spans 10bp of WT CIC sequence on either side of the CIC breakpoint.

---
for sample in X1_siSCRMBL1 X1_siSCRMBL2 X1_siCIC1 X1_siCIC2 X292_SCRMBL1 X292_SCRMBL2 X292_siCIC1 X292_siCIC2
do
	zcat ${sample}_1.fq.gz > ${sample}_1_unzipped.fastq
	grep -i "CGGACTCTGGCACGGCCCAG" ${sample}_1_unzipped.fastq > grep/${sample}_1_WT_reads.txt
	rm ${sample}_1_unzipped.fastq
	zcat ${sample}_2.fq.gz > ${sample}_2_unzipped.fastq
	grep -i "CGGACTCTGGCACGGCCCAG" ${sample}_2_unzipped.fastq > grep/${sample}_2_WT_reads.txt
	rm ${sample}_2_unzipped.fastq
done

---
----------------------

----------------------
Generate BigWig files for easier visualization in IGV with the ChIPseq data.
Doing this locally on my computer.
Default settings except I'm normalizing by CPM so I can compare samples to each other.
Just doing replicate 1 for each since I will only visualize one replicate. The replicates highly correlate with each other (see R analysis) so this should be OK.
---
bamCoverage --bam bam/X1_siSCRMBL1.bam -o bw/X1_siSCRMBL1.bw --normalizeUsing CPM
bamCoverage --bam bam/X1_siCIC1.bam -o bw/X1_siCIC1.bw --normalizeUsing CPM
bamCoverage --bam bam/X292_SCRMBL1.bam -o bw/X292_SCRMBL1.bw --normalizeUsing CPM
bamCoverage --bam bam/X292_siCIC1.bam -o bw/X292_siCIC1.bw --normalizeUsing CPM
---
----------------------

Remaining analyses were performed in R. See "X1_CDS2_siCIC_DE.R".
